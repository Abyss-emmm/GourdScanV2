#encoding:utf-8
import thirdparty.hackhttp
import threading
import os
import imp
import requests
import yaml
import lib.out
import thirdparty.utils
from lib.config import plugin_file,config_file
import lib.settings
from thirdparty.exception import ToolkitMissingPrivileges

class Exploitdb(object):
    _instance_lock = threading.Lock()

    def __init__(self):
        self.scanrecord = {}
        self.init()

    def __new__(cls, *args, **kwargs):
        if not hasattr(Exploitdb, "_instance"):
            with Exploitdb._instance_lock:
                if not hasattr(Exploitdb, "_instance"):
                    Exploitdb._instance = object.__new__(cls)
        return Exploitdb._instance

    def init(self):
        self.pulgins = []
        def getExp():
            direxp = []
            for usedir in plugin_file.conf['use']:
                path = os.path.join(lib.settings.PLUGIN_PATH,usedir)
                print "path:%s" % path
                if os.path.isdir(path):
                    for dirpath,_,filenames in os.walk(path):
                        for filename in filenames:
                            if filename.endswith(".py"):
                                direxp.append(os.path.join(dirpath,filename))
            return direxp
        def load_module(chunk,name="<exploitscan>"):
            try:
                pluginObj = imp.new_module(str(name))
                exec chunk in pluginObj.__dict__
            except Exception:
                raise ToolkitMissingPrivileges("Load Module excepting")
            return pluginObj
        dir_exploit = getExp()
        try:
            for expfile in dir_exploit:
                with open(expfile,'rb') as f:
                    reads = str(f.read())
                    pluginObj = load_module(reads)
                    if not hasattr(pluginObj,"exp4req"):
                        errorMsg = "Can't find essential method:'exp' in current scriptï¼ŒPlease modify your {}.".format(exp)
                        out.error(errorMsg)
                    else:
                        pluginObj.__filename__ = expfile
                        pluginObj.hackhttp = thirdparty.hackhttp
                        pluginObj.requests = requests
                        pluginObj.yaml = yaml
                        pluginObj.settings = lib.settings
                        pluginObj.utils = thirdparty.utils
                        pluginObj.only_one_match = (config_file.conf['only_one_match'].lower() == "true")
                        pluginObj.request_payload_allparams = thirdparty.utils.request_payload_allparams
                        pluginObj.scanrecord = self.scanrecord
                        self.pulgins.append(pluginObj)
        except Exception as error_info:
            raise ToolkitMissingPrivileges(error_info)

    def exp(self,request):
        request_stat = 0
        request_message = []
        request_result = {}
        vulnerable = 0
        for pluginObj in self.pulgins:
            if config_file.conf['scan_stat'].lower() == "true":
                key,message = pluginObj.exp4req(request)
                request_stat = message['request_stat']
                if request_stat > vulnerable:
                    vulnerable = request_stat
                request_message = message['message'].split("|,|")
                request_result[key] = {"stat":request_stat,"message":request_message}
        request_result['stat'] = vulnerable
        return request_result
